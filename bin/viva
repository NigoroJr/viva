#!/usr/bin/env ruby

require 'viva'
require 'slop'

trap(2) { exit 1 }

opts = Slop.parse do |o|
  o.bool '--add', 'Add new tracks using the interactive menu'
  o.bool '--edit', 'Edit tracks using the interactive menu'
  o.bool '--delete', 'Delete tracks using the interactive menu'
  o.bool '--count', 'Count number of series and tracks in the database'
  o.bool '--search', 'Search for tracks'
  o.bool '--show', 'Show track info'
  o.string '--db', 'Specify databes te use'
  o.string '--play', 'Play music (use with --save to save and play)'
  o.string '--save', 'Save file'
  o.string '-t', '--track', 'Specify track name'
  o.string '-s', '--series', 'Specify series name'

  o.bool '--scrape', 'Scrape website'
  o.bool '--rescrape', 'Clear scraped data and scrape again'

  o.bool '-v', '--version', 'Show version'
  o.bool '-h', '--help', 'Show help'
end

if opts.help?
  puts opts
  exit
elsif opts.version?
  puts Viva::VERSION
  exit
end

# Adds a method to check if string is an integer-representation
class String
  def int?
    to_i.to_s == self
  end
end

# Prompts for an input.
# Returns the given default value if no string is entered.
def input(mes, default = :none, &validator)
  default_fmt = ' (default: %s)'
  print mes
  print format(default_fmt, default) unless default == :none || default.nil?
  print ': '
  input = STDIN.gets.chomp.strip
  input = default if input.empty? && default != :none
  return input unless block_given?

  validator.call(input) ? input : default
end

# Adds interactive functionalities to Viva class
class Viva
  def interactive_add
    what = input('Series (s), track (t), or quit (q)', nil)
    return if what.nil?

    case what[0]
    when 't'
      (track_prop, series) = get_track_prop
      db.add_tracks(track_prop, series)
    when 's'
      db.add_series(get_series_prop)
    else
      exit
    end
  end

  def interactive_edit
    what = interactive_search
    return if what.nil?

    to_edit = prompt(what)
    case to_edit
    when Viva::Database::Track
      (track_prop, series) = get_track_prop
      db.update_track(to_edit, track_prop, series)
    when Viva::Database::Series
      db.update_series(to_edit, get_series_prop)
    end
  end

  # Returns a list of tracks that match the query
  def interactive_search
    what = input('Series (s), track (t), or quit (q)', nil)
    case what[0]
    when 't'
      interactive_search_track
    when 's'
      interactive_search_series
    else
      exit
    end
  end

  def interactive_search_series
    series = input('Series name', nil)
    return if series.nil?
    res = db.search_series(series.split(' '))
    res.empty? ? nil : res
  end

  def interactive_search_track
    title = input('Title')
    series = input('Series', nil)

    return if title.empty? && series.nil?

    items = db.search_series(series.split(' ')) unless series.nil?
    # items is nil if series.nil?, hence will search all tracks
    res =db.search_tracks(title.split(' '), items)
    res.empty? ? nil : res
  end

  private

  def get_track_prop
    title = input('Track title', nil)
    url = input('URL (or absolute file path', nil)
    series = input('Series to associate', nil)
    unless series.nil?
      candidate_series = prompt(db.search_series(series.split(' ')))
      if candidate_series.nil?
        puts 'Could not find that series. Adding.'
        series = db.add_series(get_series_prop)
      else
        series = candidate_series
      end
    end
    track_prop = {}
    track_prop[:title] = track_prop[:default_title] = title unless title.nil?
    track_prop[:url] = url unless url.nil?

    [track_prop, series]
  end

  def get_series_prop
    jpn = input('Japanese name', nil)
    eng = input('English name', nil)
    exit 1 if jpn.nil? && eng.nil?
    series_prop = {}
    series_prop[:jpn] = jpn unless jpn.nil?
    series_prop[:eng] = eng unless eng.nil?
    series_prop[:raw] = jpn || eng

    series_prop
  end
end

# To get arguments,
args = opts.arguments

v = opts[:db].nil? ? Viva.new : Viva.new(opts[:db])

case
when opts.count?
  puts "Series: #{Viva::Database::Series.count}"
  puts "Tracks: #{Viva::Database::Track.count}"
  exit
when opts.scrape? || opts.rescrape?
  threads = input('Number of threads', 1) do |input|
    input.int? && input.to_i > 0
  end
  v.scrape(threads: threads.to_i, rescrape: opts.rescrape?)
when opts.add?
  v.interactive_add
when opts.edit?
  v.interactive_edit
when opts.search? && opts[:series].nil? && opts[:track].nil? && args.empty?
  to_show = v.prompt(v.interactive_search)
  exit if to_show.nil?
  puts to_show.to_s(detailed: true)
  exit
when opts.delete?
  to_delete = v.prompt(v.interactive_search)
  confirm = input('Really delete? (y/N)', 'n')
  case to_delete
  when Viva::Database::Track
    to_delete.destroy if confirm == 'y'
  when Viva::Database::Series
    to_delete.destroy if confirm == 'y'
  end
else
  case
  when !opts[:series].nil?
    if opts[:track].nil?
      selected = v.prompt(v.db.search_series(opts[:series]))
      exit if selected.nil?
      tracks = selected.tracks
    else
      tracks = v.db.search_tracks(opts[:track], opts[:series])
    end
  when opts[:track]
    tracks = v.db.search_tracks(opts[:track])
  else
    tracks = v.db.search(args)
  end

  exit if tracks.empty?

  to_play = v.prompt(tracks)
  exit if to_play.nil?

  if opts[:show] || opts[:search]
    puts to_play.to_s(detailed: true)
    exit
  elsif !opts[:save].nil? && opts[:play].nil?
    v.save(opts[:save])
    exit
  end

  v.play(to_play, opts[:save])
end
